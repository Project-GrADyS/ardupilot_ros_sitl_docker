version: '3.8'

networks:
  ros_sitl_net:
    driver: bridge

services:
  ardupilot-sitl:
    image: ardupilot
    build:
      context: .
      dockerfile: ./ardupilot-sitl-docker/Dockerfile
    container_name: sitl_1
    platform: linux/amd64
    privileged: true
    entrypoint: /ardupilot/Tools/autotest/sim_vehicle.py --vehicle ArduCopter -I0 --custom-location=39.9656,-75.1810,276,180 -w --frame + --no-rebuild --enable-dds --no-mavproxy --speedup 2
    tty: true
    ports:
      - 5760:5760
    networks:
      - ros_sitl_net
    env_file:
      - sitl-protocol.env


  #mavproxy:
    #image: ardupilot
    #container_name: MAVProxy
    #entrypoint: ["python3",  "/home/dockeruser/.local/lib/python3.10/site-packages/MAVProxy/mavproxy.py", "--master=tcp:sitl_1:5760", "--out udp:sitl_1:14550"]
    #stdin_open: true
    #tty: true
    #ports:
    #  - 8080:8080
    #networks:
    #  - ros_sitl_net

  # for process monitoring
  #create a volume to store the packages
  # definir o deploy:
  # packages a serem compilados
  # scripts a serem considerados
  # receber parametros do user e coloca-los em uma variavel
  # o entrypoint deve usar as variaveis de parametros para definir os scripts e os pacotes a serem compilados, e por ultimo, o(s) programa(s) que deve rodar (ou mavros para monitoramento)

  ros-control:
    image: ardupilot_ros
    build:
      context: .
      dockerfile: ./ardupilot_ros_docker/Dockerfile_dev-ros
    container_name: ros_control
    entrypoint: ["/bin/bash", "-c", "/ros2_config_app/init.sh"]
    privileged: true
    volumes:
      - type: bind
        source: ./ardupilot_ros_docker/ros2_workspace
        target: /ros2_ws
        
      - type: bind
        source: ./ardupilot_ros_docker/configs
        target: /ros2_config_app
        read_only: true
    networks:
      - ros_sitl_net