networks:
  ros_sitl_net:
    driver: bridge

services:
  ardupilot-sitl:
    image: ardupilot
    build:
      context: .
      dockerfile: ./ardupilot-sitl-docker/Dockerfile
    container_name: sitl_1
    platform: linux/amd64
    privileged: true
    entrypoint: [ "/bin/sh", "-c", "if [ \"$SIM_MODE\" -eq 1 ]; then /ardupilot/Tools/autotest/sim_vehicle.py --vehicle ArduCopter -I0 -w --frame=quad --no-rebuild --enable-dds --speedup 2 --console --map --custom-location=-15.8415,-47.9263,276,0 --out=udp:ros_control:14540; else echo 'Simulation mode is off'; fi" ]
    tty: true
    ports:
      - 5760:5760
      - 14540:14540/udp
    expose:
      - "14540/udp"
    environment:
      - DISPLAY=$DISPLAY
      - QT_X11_NO_MITSHM=1
      - SIM_MODE=${SIM_MODE}
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
    networks:
      - ros_sitl_net

  #mavproxy:
  #  image: ardupilot
  #  container_name: MAVProxy
  #  entrypoint: ["python3",  "/home/dockeruser/.local/lib/python3.10/site-packages/MAVProxy/mavproxy.py", "--master=tcp:sitl_1:5760"]
  #  stdin_open: true
  #  tty: true
  #  ports:
  #    - 8080:8080
  #  environment:
  #    - DISPLAY=${DISPLAY}
  #  volumes:
  #    - /tmp/.X11-unix:/tmp/.X11-unix:rw
  #  networks:
  #    - ros_sitl_net    networks:


  # for process monitoring
  # create a volume to store the packages
  # definir o deploy:
  # packages a serem compilados
  # scripts a serem considerados
  # receber parametros do user e coloca-los em uma variavel
  # o entrypoint deve usar as variaveis de parametros para definir os scripts e os pacotes a serem compilados, e por ultimo, o(s) programa(s) que deve rodar (ou mavros para monitoramento)

  ros-control:
    image: ardupilot_ros
    build:
      context: .
      dockerfile: ./ardupilot_ros_docker/Dockerfile_dev-ros
    user: 0:0
    container_name: ros_control
    entrypoint: [ "/bin/bash", "-c", "/ros2_config_app/init.sh" ]
    privileged: true
    environment:
      - COMPILE_STATE=${COMPILE_STATE}
      - CREATE_PACKAGE_STATE=${CREATE_PACKAGE_STATE}
      - PACKAGES_TO_CREATE=${PACKAGES_TO_CREATE}
      - PACKAGES_TO_BUILD=${PACKAGES_TO_BUILD}
      - NODES_FOR_RUN=${NODES_FOR_RUN}
      - COM_ARCH=${COM_ARCH}
      - FCU_URL=${FCU_URL}
      - SIM_MODE=${SIM_MODE}
      - TGT_SYSTEM=${TGT_SYSTEM}
    volumes:
      - type: bind
        source: ./ardupilot_ros_docker/ros2_workspace
        target: /ros2_ws

      - type: bind
        source: ./ardupilot_ros_docker/configs
        target: /ros2_config_app
        read_only: true
    devices:
      - /dev/ttyS0:/dev/ttyS0
    networks:
      - ros_sitl_net
