import sys
import os
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(current_dir)
import rclpy
from rclpy.node import Node
from ArdupilotModules.Copter import Copter

ALT = 30.0

class Line(Copter):
    def __init__(self, node_name: str, SYSID: int):
        super().__init__(node_name, SYSID)
        self.timerIsOn = False
        self.land_timer = None
        self.mission = None
        
        self.check_alt_callback = self.create_timer(0.02, self.checkAlt)
        self.state_callback = self.create_timer(0.02, self.armVehicle)  # update every 0.02 seconds


    def armVehicle(self):
        state = self.getState()
        mode = state.getMode()
        armed = state.isArmed()
        self.get_logger().info(f'ARMED TEST = {armed}')
        if not armed and mode == "GUIDED":
            state.setArm(True)
            state.setTakeoff(altitude=ALT)

    def checkAlt(self):
        alt = self.getLocalPosition().getPose().getPosePosition().getZ()
        pos = self.getGlobalPosition().getGlobal().getCoordinate()
        self.get_logger().info(f'POSITION: \n \
                               latitude: {pos.getLatitude()}\n \
                               longitude: {pos.getLongitude()}\n \
                               altitude: {pos.getAltitude()}\n \
                               ')
        if alt >= 0.95 * ALT and not self.timerIsOn:
            self.timerIsOn = True
            self.get_logger().info('RODOU 0')
            self.land_timer = self.create_timer(8.0, self.run_mission)  # Configura o temporizador para chamar a função de waypoint em 3 segundos

    def activate_land(self):
        self.get_logger().info('Activating LAND mode')
        self.getState().setMode("LAND")
        self.destroy_timer(self.land_timer)
        self.timerIsOn = False

    def run_mission(self):
        self.mission = self.getMission()
        self.mission.addWaypoint(0, 16, 0.0, 0.0, 0.0, float("nan"), float(49.22222), float(7.22222), 0.0)
        self.mission.addWaypoint(0, 16, 0.0, 0.0, 0.0, float("nan"), float(69.22222), float(7.22222), 0.0)
        self.get_logger().info('Adding waypoints and sending mission')  # Log de adição e envio de waypoints
        if self.mission.sendWaypointList():
            self.get_logger().info('Mission waypoints sent successfully')  # Log de sucesso no envio
        else:
            self.get_logger().error('Failed to send mission waypoints')  # Log de falha no envio
        self.mission.sendWaypointList()
        self.getState().setMode("LAND")
        self.destroy_timer(self.land_timer)
        self.timerIsOn = False


def main(args=None):
    rclpy.init(args=args)

    drone = Line('line_node', 25)
    drone.getState().setMavrosStreamRate(3)
    drone.getState().setMode("GUIDED")
    rate = drone.create_rate(5)

    try:
        while rclpy.ok():
            drone.get_logger().warning('Beginning client, shut down with CTRL-C')
            rclpy.spin(drone)
            rate.sleep()
    except KeyboardInterrupt:
        drone.get_logger().info('Keyboard interrupt, shutting down.\n')
    finally:
        drone.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()